{"mappings":"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","sources":["src/index.ts"],"sourcesContent":["type GSAP = never;\n\ninterface ShapeOverlaysOptions {\n  svgClassName: string;\n  pathClassName: string;\n  numberPoints?: number;\n  delayPoints?: number;\n  delayPaths?: number;\n  duration?: number;\n  ease?: string;\n}\n\nclass ShapeOverlays {\n  private static gsap: GSAP;\n\n  private svg: SVGElement | null = null;\n\n  private path: SVGPathElement[] = [];\n\n  private readonly numberPoints: number;\n\n  private readonly delayPoints: number;\n\n  private readonly delayPaths: number;\n\n  private readonly duration: number;\n\n  private readonly ease: string;\n\n  private isOpened: boolean = false;\n\n  private pointsDelay: number[] = [];\n\n  private allPoints: number[][] = [];\n\n  private tl: GSAPTimeline;\n\n  private options: ShapeOverlaysOptions;\n\n  static registerGSAP(gsap: GSAP) {\n    ShapeOverlays.gsap = gsap;\n  }\n\n  constructor(options: ShapeOverlaysOptions) {\n    this.options = options;\n    this.numberPoints = options.numberPoints ?? 4;\n    this.delayPoints = options.delayPoints ?? 0.3;\n    this.delayPaths = options.delayPaths ?? 0.25;\n    this.duration = options.duration ?? 1;\n    this.ease = options.ease ?? 'none';\n    this.tl = {} as GSAPTimeline;\n  }\n\n  private initializePaths(): void {\n    this.allPoints = this.path.map(() => Array(this.numberPoints).fill(100));\n  }\n\n  private render = (): void => {\n    this.path.forEach((path, i) => {\n      const points = this.allPoints[i];\n\n      let d = this.isOpened ? `M 0 0 V ${points[0]} C` : `M 0 ${points[0]} C`;\n\n      for (let j = 0; j < this.numberPoints - 1; j += 1) {\n        const p = ((j + 1) / (this.numberPoints - 1)) * 100;\n        const cp = p - ((1 / (this.numberPoints - 1)) * 100) / 2;\n\n        d += ` ${cp} ${points[j]} ${cp} ${points[j + 1]} ${p} ${points[j + 1]}`;\n      }\n\n      d += this.isOpened ? ' V 100 H 0' : ' V 0 H 0';\n\n      path.setAttribute('d', d);\n    });\n  };\n\n  private update(): void {\n    this.tl.progress(0).clear();\n    this.pointsDelay = Array.from({ length: this.numberPoints }, () => Math.random() * this.delayPoints);\n\n    this.allPoints.forEach((points, i) => {\n      const pathDelay = this.delayPaths * (this.isOpened ? i : (this.path.length - i - 1));\n\n      this.pointsDelay.forEach((delay, j) => {\n        this.tl.to(points, { [j]: 0 }, delay + pathDelay);\n      });\n    });\n  }\n\n  toggle(): void {\n    if (!this.tl.isActive()) {\n      this.isOpened = !this.isOpened;\n      this.update();\n    }\n  }\n\n  entry(): void {\n    if (!this.tl.isActive()) {\n      this.isOpened = true;\n      this.update();\n    }\n  }\n\n  leave(): void {\n    if (!this.tl.isActive()) {\n      this.isOpened = false;\n      this.update();\n    }\n  }\n\n  totalDuration(): number {\n    return Math.round(this.tl.totalDuration() * 1000);\n  }\n\n  init(): void {\n    const {\n      svgClassName,\n      pathClassName,\n    } = this.options;\n\n    this.gsap = ShapeOverlays.gsap || (window as never).gsap;\n    this.svg = document.querySelector<SVGElement>(svgClassName);\n    this.path = Array.from(this.svg?.querySelectorAll<SVGPathElement>(pathClassName) || []);\n    this.isOpened = false;\n    this.pointsDelay = [];\n    this.allPoints = [];\n    this.tl = this.gsap.timeline({\n      onUpdate: this.render,\n      defaults: {\n        ease: this.ease,\n        duration: this.duration,\n      },\n    });\n\n    if (!this.svg) return;\n\n    this.svg.classList.add(`${svgClassName.replace(/\\./g, '')}--initialize`);\n    this.initializePaths();\n  }\n\n  public destroy(): void {\n    if (this.tl) {\n      this.gsap.killTweensOf([this.tl]);\n      this.tl.kill();\n    }\n\n    if (this.svg) {\n      this.svg.classList.remove(...Array.from(this.svg.classList).map((cls) => `${cls}--initialize`));\n    }\n\n    this.svg = null;\n    this.path = [];\n    this.pointsDelay = [];\n    this.allPoints = [];\n  }\n\n  public reinitialize(options: ShapeOverlaysOptions): void {\n    this.destroy();\n    this.options = options;\n    this.init();\n  }\n}\n\nexport default ShapeOverlays;\n"],"names":[],"version":3,"file":"index.js.map"}